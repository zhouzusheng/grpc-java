// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc/lookup/v1/rls.proto

package io.grpc.lookup.v1;

public interface RouteLookupRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:grpc.lookup.v1.RouteLookupRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Full host name of the target server, e.g. firestore.googleapis.com.
   * Only set for gRPC requests; HTTP requests must use key_map explicitly.
   * </pre>
   *
   * <code>string server = 1;</code>
   */
  String getServer();
  /**
   * <pre>
   * Full host name of the target server, e.g. firestore.googleapis.com.
   * Only set for gRPC requests; HTTP requests must use key_map explicitly.
   * </pre>
   *
   * <code>string server = 1;</code>
   */
  com.google.protobuf.ByteString
      getServerBytes();

  /**
   * <pre>
   * Full path of the request, i.e. "/service/method".
   * Only set for gRPC requests; HTTP requests must use key_map explicitly.
   * </pre>
   *
   * <code>string path = 2;</code>
   */
  String getPath();
  /**
   * <pre>
   * Full path of the request, i.e. "/service/method".
   * Only set for gRPC requests; HTTP requests must use key_map explicitly.
   * </pre>
   *
   * <code>string path = 2;</code>
   */
  com.google.protobuf.ByteString
      getPathBytes();

  /**
   * <pre>
   * Target type allows the client to specify what kind of target format it
   * would like from RLS to allow it to find the regional server, e.g. "grpc".
   * </pre>
   *
   * <code>string target_type = 3;</code>
   */
  String getTargetType();
  /**
   * <pre>
   * Target type allows the client to specify what kind of target format it
   * would like from RLS to allow it to find the regional server, e.g. "grpc".
   * </pre>
   *
   * <code>string target_type = 3;</code>
   */
  com.google.protobuf.ByteString
      getTargetTypeBytes();

  /**
   * <pre>
   * Map of key values extracted via key builders for the gRPC or HTTP request.
   * </pre>
   *
   * <code>map&lt;string, string&gt; key_map = 4;</code>
   */
  int getKeyMapCount();
  /**
   * <pre>
   * Map of key values extracted via key builders for the gRPC or HTTP request.
   * </pre>
   *
   * <code>map&lt;string, string&gt; key_map = 4;</code>
   */
  boolean containsKeyMap(
      String key);
  /**
   * Use {@link #getKeyMapMap()} instead.
   */
  @Deprecated
  java.util.Map<String, String>
  getKeyMap();
  /**
   * <pre>
   * Map of key values extracted via key builders for the gRPC or HTTP request.
   * </pre>
   *
   * <code>map&lt;string, string&gt; key_map = 4;</code>
   */
  java.util.Map<String, String>
  getKeyMapMap();
  /**
   * <pre>
   * Map of key values extracted via key builders for the gRPC or HTTP request.
   * </pre>
   *
   * <code>map&lt;string, string&gt; key_map = 4;</code>
   */

  String getKeyMapOrDefault(
      String key,
      String defaultValue);
  /**
   * <pre>
   * Map of key values extracted via key builders for the gRPC or HTTP request.
   * </pre>
   *
   * <code>map&lt;string, string&gt; key_map = 4;</code>
   */

  String getKeyMapOrThrow(
      String key);
}
