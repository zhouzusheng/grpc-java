// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc/lookup/v1/rls_config.proto

package io.grpc.lookup.v1;

public interface HttpKeyBuilderOrBuilder extends
    // @@protoc_insertion_point(interface_extends:grpc.lookup.v1.HttpKeyBuilder)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * host_pattern is an ordered list of host template patterns for the desired
   * value.  If any host_pattern values are specified, then at least one must
   * match, and the last one wins and sets any specified variables.  A host
   * consists of labels separated by dots. Each label is matched against the
   * label in the pattern as follows:
   *   - "*": Matches any single label.
   *   - "**": Matches zero or more labels (first or last part of host only).
   *   - "{&lt;name&gt;=...}": One or more label capture, where "..." can be any
   *      template that does not include a capture.
   *   - "{&lt;name&gt;}": A single label capture. Identical to {&lt;name&gt;=*}.
   * Examples:
   *   - "example.com": Only applies to the exact host example.com.
   *   - "*.example.com": Matches subdomains of example.com.
   *   - "**.example.com": matches example.com, and all levels of subdomains.
   *   - "{project}.example.com": Extracts the third level subdomain.
   *   - "{project=**}.example.com": Extracts the third level+ subdomains.
   *   - "{project=**}": Extracts the entire host.
   * </pre>
   *
   * <code>repeated string host_patterns = 1;</code>
   */
  java.util.List<String>
      getHostPatternsList();
  /**
   * <pre>
   * host_pattern is an ordered list of host template patterns for the desired
   * value.  If any host_pattern values are specified, then at least one must
   * match, and the last one wins and sets any specified variables.  A host
   * consists of labels separated by dots. Each label is matched against the
   * label in the pattern as follows:
   *   - "*": Matches any single label.
   *   - "**": Matches zero or more labels (first or last part of host only).
   *   - "{&lt;name&gt;=...}": One or more label capture, where "..." can be any
   *      template that does not include a capture.
   *   - "{&lt;name&gt;}": A single label capture. Identical to {&lt;name&gt;=*}.
   * Examples:
   *   - "example.com": Only applies to the exact host example.com.
   *   - "*.example.com": Matches subdomains of example.com.
   *   - "**.example.com": matches example.com, and all levels of subdomains.
   *   - "{project}.example.com": Extracts the third level subdomain.
   *   - "{project=**}.example.com": Extracts the third level+ subdomains.
   *   - "{project=**}": Extracts the entire host.
   * </pre>
   *
   * <code>repeated string host_patterns = 1;</code>
   */
  int getHostPatternsCount();
  /**
   * <pre>
   * host_pattern is an ordered list of host template patterns for the desired
   * value.  If any host_pattern values are specified, then at least one must
   * match, and the last one wins and sets any specified variables.  A host
   * consists of labels separated by dots. Each label is matched against the
   * label in the pattern as follows:
   *   - "*": Matches any single label.
   *   - "**": Matches zero or more labels (first or last part of host only).
   *   - "{&lt;name&gt;=...}": One or more label capture, where "..." can be any
   *      template that does not include a capture.
   *   - "{&lt;name&gt;}": A single label capture. Identical to {&lt;name&gt;=*}.
   * Examples:
   *   - "example.com": Only applies to the exact host example.com.
   *   - "*.example.com": Matches subdomains of example.com.
   *   - "**.example.com": matches example.com, and all levels of subdomains.
   *   - "{project}.example.com": Extracts the third level subdomain.
   *   - "{project=**}.example.com": Extracts the third level+ subdomains.
   *   - "{project=**}": Extracts the entire host.
   * </pre>
   *
   * <code>repeated string host_patterns = 1;</code>
   */
  String getHostPatterns(int index);
  /**
   * <pre>
   * host_pattern is an ordered list of host template patterns for the desired
   * value.  If any host_pattern values are specified, then at least one must
   * match, and the last one wins and sets any specified variables.  A host
   * consists of labels separated by dots. Each label is matched against the
   * label in the pattern as follows:
   *   - "*": Matches any single label.
   *   - "**": Matches zero or more labels (first or last part of host only).
   *   - "{&lt;name&gt;=...}": One or more label capture, where "..." can be any
   *      template that does not include a capture.
   *   - "{&lt;name&gt;}": A single label capture. Identical to {&lt;name&gt;=*}.
   * Examples:
   *   - "example.com": Only applies to the exact host example.com.
   *   - "*.example.com": Matches subdomains of example.com.
   *   - "**.example.com": matches example.com, and all levels of subdomains.
   *   - "{project}.example.com": Extracts the third level subdomain.
   *   - "{project=**}.example.com": Extracts the third level+ subdomains.
   *   - "{project=**}": Extracts the entire host.
   * </pre>
   *
   * <code>repeated string host_patterns = 1;</code>
   */
  com.google.protobuf.ByteString
      getHostPatternsBytes(int index);

  /**
   * <pre>
   * path_pattern is an ordered list of path template patterns for the desired
   * value.  If any path_pattern values are specified, then at least one must
   * match, and the last one wins and sets any specified variables.  A path
   * consists of segments separated by slashes. Each segment is matched against
   * the segment in the pattern as follows:
   *   - "*": Matches any single segment.
   *   - "**": Matches zero or more segments (first or last part of path only).
   *   - "{&lt;name&gt;=...}": One or more segment capture, where "..." can be any
   *      template that does not include a capture.
   *   - "{&lt;name&gt;}": A single segment capture. Identical to {&lt;name&gt;=*}.
   * A custom method may also be specified by appending ":" and the custom
   * method name or "*" to indicate any custom method (including no custom
   * method).  For example, "/&#42;&#47;projects/{project_id}/&#42;*:*" extracts
   * `{project_id}` for any version, resource and custom method that includes
   * it.  By default, any custom method will be matched.
   * Examples:
   *   - "/v1/{name=messages/&#42;}": extracts a name like "messages/12345".
   *   - "/v1/messages/{message_id}": extracts a message_id like "12345".
   *   - "/v1/users/{user_id}/messages/{message_id}": extracts two key values.
   * </pre>
   *
   * <code>repeated string path_patterns = 2;</code>
   */
  java.util.List<String>
      getPathPatternsList();
  /**
   * <pre>
   * path_pattern is an ordered list of path template patterns for the desired
   * value.  If any path_pattern values are specified, then at least one must
   * match, and the last one wins and sets any specified variables.  A path
   * consists of segments separated by slashes. Each segment is matched against
   * the segment in the pattern as follows:
   *   - "*": Matches any single segment.
   *   - "**": Matches zero or more segments (first or last part of path only).
   *   - "{&lt;name&gt;=...}": One or more segment capture, where "..." can be any
   *      template that does not include a capture.
   *   - "{&lt;name&gt;}": A single segment capture. Identical to {&lt;name&gt;=*}.
   * A custom method may also be specified by appending ":" and the custom
   * method name or "*" to indicate any custom method (including no custom
   * method).  For example, "/&#42;&#47;projects/{project_id}/&#42;*:*" extracts
   * `{project_id}` for any version, resource and custom method that includes
   * it.  By default, any custom method will be matched.
   * Examples:
   *   - "/v1/{name=messages/&#42;}": extracts a name like "messages/12345".
   *   - "/v1/messages/{message_id}": extracts a message_id like "12345".
   *   - "/v1/users/{user_id}/messages/{message_id}": extracts two key values.
   * </pre>
   *
   * <code>repeated string path_patterns = 2;</code>
   */
  int getPathPatternsCount();
  /**
   * <pre>
   * path_pattern is an ordered list of path template patterns for the desired
   * value.  If any path_pattern values are specified, then at least one must
   * match, and the last one wins and sets any specified variables.  A path
   * consists of segments separated by slashes. Each segment is matched against
   * the segment in the pattern as follows:
   *   - "*": Matches any single segment.
   *   - "**": Matches zero or more segments (first or last part of path only).
   *   - "{&lt;name&gt;=...}": One or more segment capture, where "..." can be any
   *      template that does not include a capture.
   *   - "{&lt;name&gt;}": A single segment capture. Identical to {&lt;name&gt;=*}.
   * A custom method may also be specified by appending ":" and the custom
   * method name or "*" to indicate any custom method (including no custom
   * method).  For example, "/&#42;&#47;projects/{project_id}/&#42;*:*" extracts
   * `{project_id}` for any version, resource and custom method that includes
   * it.  By default, any custom method will be matched.
   * Examples:
   *   - "/v1/{name=messages/&#42;}": extracts a name like "messages/12345".
   *   - "/v1/messages/{message_id}": extracts a message_id like "12345".
   *   - "/v1/users/{user_id}/messages/{message_id}": extracts two key values.
   * </pre>
   *
   * <code>repeated string path_patterns = 2;</code>
   */
  String getPathPatterns(int index);
  /**
   * <pre>
   * path_pattern is an ordered list of path template patterns for the desired
   * value.  If any path_pattern values are specified, then at least one must
   * match, and the last one wins and sets any specified variables.  A path
   * consists of segments separated by slashes. Each segment is matched against
   * the segment in the pattern as follows:
   *   - "*": Matches any single segment.
   *   - "**": Matches zero or more segments (first or last part of path only).
   *   - "{&lt;name&gt;=...}": One or more segment capture, where "..." can be any
   *      template that does not include a capture.
   *   - "{&lt;name&gt;}": A single segment capture. Identical to {&lt;name&gt;=*}.
   * A custom method may also be specified by appending ":" and the custom
   * method name or "*" to indicate any custom method (including no custom
   * method).  For example, "/&#42;&#47;projects/{project_id}/&#42;*:*" extracts
   * `{project_id}` for any version, resource and custom method that includes
   * it.  By default, any custom method will be matched.
   * Examples:
   *   - "/v1/{name=messages/&#42;}": extracts a name like "messages/12345".
   *   - "/v1/messages/{message_id}": extracts a message_id like "12345".
   *   - "/v1/users/{user_id}/messages/{message_id}": extracts two key values.
   * </pre>
   *
   * <code>repeated string path_patterns = 2;</code>
   */
  com.google.protobuf.ByteString
      getPathPatternsBytes(int index);

  /**
   * <pre>
   * List of query parameter names to try to match.
   * For example: ["parent", "name", "resource.name"]
   * We extract all the specified query_parameters (case-sensitively).  If any
   * are marked as "required_match" and are not present, this keybuilder fails
   * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
   * will report it as a comma-separated string (foo=a,b).
   * </pre>
   *
   * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
   */
  java.util.List<NameMatcher>
      getQueryParametersList();
  /**
   * <pre>
   * List of query parameter names to try to match.
   * For example: ["parent", "name", "resource.name"]
   * We extract all the specified query_parameters (case-sensitively).  If any
   * are marked as "required_match" and are not present, this keybuilder fails
   * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
   * will report it as a comma-separated string (foo=a,b).
   * </pre>
   *
   * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
   */
  NameMatcher getQueryParameters(int index);
  /**
   * <pre>
   * List of query parameter names to try to match.
   * For example: ["parent", "name", "resource.name"]
   * We extract all the specified query_parameters (case-sensitively).  If any
   * are marked as "required_match" and are not present, this keybuilder fails
   * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
   * will report it as a comma-separated string (foo=a,b).
   * </pre>
   *
   * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
   */
  int getQueryParametersCount();
  /**
   * <pre>
   * List of query parameter names to try to match.
   * For example: ["parent", "name", "resource.name"]
   * We extract all the specified query_parameters (case-sensitively).  If any
   * are marked as "required_match" and are not present, this keybuilder fails
   * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
   * will report it as a comma-separated string (foo=a,b).
   * </pre>
   *
   * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
   */
  java.util.List<? extends NameMatcherOrBuilder>
      getQueryParametersOrBuilderList();
  /**
   * <pre>
   * List of query parameter names to try to match.
   * For example: ["parent", "name", "resource.name"]
   * We extract all the specified query_parameters (case-sensitively).  If any
   * are marked as "required_match" and are not present, this keybuilder fails
   * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
   * will report it as a comma-separated string (foo=a,b).
   * </pre>
   *
   * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
   */
  NameMatcherOrBuilder getQueryParametersOrBuilder(
      int index);

  /**
   * <pre>
   * List of headers to try to match.
   * We extract all the specified header values (case-insensitively).  If any
   * are marked as "required_match" and are not present, this keybuilder fails
   * to match.  If a given header appears multiple times in the request we will
   * report it as a comma-separated string, in standard HTTP fashion.
   * </pre>
   *
   * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
   */
  java.util.List<NameMatcher>
      getHeadersList();
  /**
   * <pre>
   * List of headers to try to match.
   * We extract all the specified header values (case-insensitively).  If any
   * are marked as "required_match" and are not present, this keybuilder fails
   * to match.  If a given header appears multiple times in the request we will
   * report it as a comma-separated string, in standard HTTP fashion.
   * </pre>
   *
   * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
   */
  NameMatcher getHeaders(int index);
  /**
   * <pre>
   * List of headers to try to match.
   * We extract all the specified header values (case-insensitively).  If any
   * are marked as "required_match" and are not present, this keybuilder fails
   * to match.  If a given header appears multiple times in the request we will
   * report it as a comma-separated string, in standard HTTP fashion.
   * </pre>
   *
   * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
   */
  int getHeadersCount();
  /**
   * <pre>
   * List of headers to try to match.
   * We extract all the specified header values (case-insensitively).  If any
   * are marked as "required_match" and are not present, this keybuilder fails
   * to match.  If a given header appears multiple times in the request we will
   * report it as a comma-separated string, in standard HTTP fashion.
   * </pre>
   *
   * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
   */
  java.util.List<? extends NameMatcherOrBuilder>
      getHeadersOrBuilderList();
  /**
   * <pre>
   * List of headers to try to match.
   * We extract all the specified header values (case-insensitively).  If any
   * are marked as "required_match" and are not present, this keybuilder fails
   * to match.  If a given header appears multiple times in the request we will
   * report it as a comma-separated string, in standard HTTP fashion.
   * </pre>
   *
   * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
   */
  NameMatcherOrBuilder getHeadersOrBuilder(
      int index);
}
