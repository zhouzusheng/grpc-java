// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc/lookup/v1/rls_config.proto

package io.grpc.lookup.v1;

/**
 * <pre>
 * An HttpKeyBuilder applies to a given HTTP URL and headers.
 * Path and host patterns use the matching syntax from gRPC transcoding to
 * extract named key/value pairs from the path and host components of the URL:
 * https://github.com/googleapis/googleapis/blob/master/google/api/http.proto
 * It is invalid to specify the same key name in multiple places in a pattern.
 * For a service where the project id can be expressed either as a subdomain or
 * in the path, separate HttpKeyBuilders must be used:
 *     host_pattern: 'example.com' path_pattern: '/{id}/{object}/&#42;*'
 *     host_pattern: '{id}.example.com' path_pattern: '/{object}/&#42;*'
 * If the host is exactly 'example.com', the first path segment will be used as
 * the id and the second segment as the object. If the host has a subdomain, the
 * subdomain will be used as the id and the first segment as the object. If
 * neither pattern matches, no keys will be extracted.
 * </pre>
 *
 * Protobuf type {@code grpc.lookup.v1.HttpKeyBuilder}
 */
public  final class HttpKeyBuilder extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:grpc.lookup.v1.HttpKeyBuilder)
    HttpKeyBuilderOrBuilder {
private static final long serialVersionUID = 0L;
  // Use HttpKeyBuilder.newBuilder() to construct.
  private HttpKeyBuilder(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private HttpKeyBuilder() {
    hostPatterns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    pathPatterns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    queryParameters_ = java.util.Collections.emptyList();
    headers_ = java.util.Collections.emptyList();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private HttpKeyBuilder(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              hostPatterns_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000001;
            }
            hostPatterns_.add(s);
            break;
          }
          case 18: {
            String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              pathPatterns_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000002;
            }
            pathPatterns_.add(s);
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
              queryParameters_ = new java.util.ArrayList<NameMatcher>();
              mutable_bitField0_ |= 0x00000004;
            }
            queryParameters_.add(
                input.readMessage(NameMatcher.parser(), extensionRegistry));
            break;
          }
          case 34: {
            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
              headers_ = new java.util.ArrayList<NameMatcher>();
              mutable_bitField0_ |= 0x00000008;
            }
            headers_.add(
                input.readMessage(NameMatcher.parser(), extensionRegistry));
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        hostPatterns_ = hostPatterns_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        pathPatterns_ = pathPatterns_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
        queryParameters_ = java.util.Collections.unmodifiableList(queryParameters_);
      }
      if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
        headers_ = java.util.Collections.unmodifiableList(headers_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return RlsConfigProto.internal_static_grpc_lookup_v1_HttpKeyBuilder_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return RlsConfigProto.internal_static_grpc_lookup_v1_HttpKeyBuilder_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            HttpKeyBuilder.class, Builder.class);
  }

  public static final int HOST_PATTERNS_FIELD_NUMBER = 1;
  private com.google.protobuf.LazyStringList hostPatterns_;
  /**
   * <pre>
   * host_pattern is an ordered list of host template patterns for the desired
   * value.  If any host_pattern values are specified, then at least one must
   * match, and the last one wins and sets any specified variables.  A host
   * consists of labels separated by dots. Each label is matched against the
   * label in the pattern as follows:
   *   - "*": Matches any single label.
   *   - "**": Matches zero or more labels (first or last part of host only).
   *   - "{&lt;name&gt;=...}": One or more label capture, where "..." can be any
   *      template that does not include a capture.
   *   - "{&lt;name&gt;}": A single label capture. Identical to {&lt;name&gt;=*}.
   * Examples:
   *   - "example.com": Only applies to the exact host example.com.
   *   - "*.example.com": Matches subdomains of example.com.
   *   - "**.example.com": matches example.com, and all levels of subdomains.
   *   - "{project}.example.com": Extracts the third level subdomain.
   *   - "{project=**}.example.com": Extracts the third level+ subdomains.
   *   - "{project=**}": Extracts the entire host.
   * </pre>
   *
   * <code>repeated string host_patterns = 1;</code>
   */
  public com.google.protobuf.ProtocolStringList
      getHostPatternsList() {
    return hostPatterns_;
  }
  /**
   * <pre>
   * host_pattern is an ordered list of host template patterns for the desired
   * value.  If any host_pattern values are specified, then at least one must
   * match, and the last one wins and sets any specified variables.  A host
   * consists of labels separated by dots. Each label is matched against the
   * label in the pattern as follows:
   *   - "*": Matches any single label.
   *   - "**": Matches zero or more labels (first or last part of host only).
   *   - "{&lt;name&gt;=...}": One or more label capture, where "..." can be any
   *      template that does not include a capture.
   *   - "{&lt;name&gt;}": A single label capture. Identical to {&lt;name&gt;=*}.
   * Examples:
   *   - "example.com": Only applies to the exact host example.com.
   *   - "*.example.com": Matches subdomains of example.com.
   *   - "**.example.com": matches example.com, and all levels of subdomains.
   *   - "{project}.example.com": Extracts the third level subdomain.
   *   - "{project=**}.example.com": Extracts the third level+ subdomains.
   *   - "{project=**}": Extracts the entire host.
   * </pre>
   *
   * <code>repeated string host_patterns = 1;</code>
   */
  public int getHostPatternsCount() {
    return hostPatterns_.size();
  }
  /**
   * <pre>
   * host_pattern is an ordered list of host template patterns for the desired
   * value.  If any host_pattern values are specified, then at least one must
   * match, and the last one wins and sets any specified variables.  A host
   * consists of labels separated by dots. Each label is matched against the
   * label in the pattern as follows:
   *   - "*": Matches any single label.
   *   - "**": Matches zero or more labels (first or last part of host only).
   *   - "{&lt;name&gt;=...}": One or more label capture, where "..." can be any
   *      template that does not include a capture.
   *   - "{&lt;name&gt;}": A single label capture. Identical to {&lt;name&gt;=*}.
   * Examples:
   *   - "example.com": Only applies to the exact host example.com.
   *   - "*.example.com": Matches subdomains of example.com.
   *   - "**.example.com": matches example.com, and all levels of subdomains.
   *   - "{project}.example.com": Extracts the third level subdomain.
   *   - "{project=**}.example.com": Extracts the third level+ subdomains.
   *   - "{project=**}": Extracts the entire host.
   * </pre>
   *
   * <code>repeated string host_patterns = 1;</code>
   */
  public String getHostPatterns(int index) {
    return hostPatterns_.get(index);
  }
  /**
   * <pre>
   * host_pattern is an ordered list of host template patterns for the desired
   * value.  If any host_pattern values are specified, then at least one must
   * match, and the last one wins and sets any specified variables.  A host
   * consists of labels separated by dots. Each label is matched against the
   * label in the pattern as follows:
   *   - "*": Matches any single label.
   *   - "**": Matches zero or more labels (first or last part of host only).
   *   - "{&lt;name&gt;=...}": One or more label capture, where "..." can be any
   *      template that does not include a capture.
   *   - "{&lt;name&gt;}": A single label capture. Identical to {&lt;name&gt;=*}.
   * Examples:
   *   - "example.com": Only applies to the exact host example.com.
   *   - "*.example.com": Matches subdomains of example.com.
   *   - "**.example.com": matches example.com, and all levels of subdomains.
   *   - "{project}.example.com": Extracts the third level subdomain.
   *   - "{project=**}.example.com": Extracts the third level+ subdomains.
   *   - "{project=**}": Extracts the entire host.
   * </pre>
   *
   * <code>repeated string host_patterns = 1;</code>
   */
  public com.google.protobuf.ByteString
      getHostPatternsBytes(int index) {
    return hostPatterns_.getByteString(index);
  }

  public static final int PATH_PATTERNS_FIELD_NUMBER = 2;
  private com.google.protobuf.LazyStringList pathPatterns_;
  /**
   * <pre>
   * path_pattern is an ordered list of path template patterns for the desired
   * value.  If any path_pattern values are specified, then at least one must
   * match, and the last one wins and sets any specified variables.  A path
   * consists of segments separated by slashes. Each segment is matched against
   * the segment in the pattern as follows:
   *   - "*": Matches any single segment.
   *   - "**": Matches zero or more segments (first or last part of path only).
   *   - "{&lt;name&gt;=...}": One or more segment capture, where "..." can be any
   *      template that does not include a capture.
   *   - "{&lt;name&gt;}": A single segment capture. Identical to {&lt;name&gt;=*}.
   * A custom method may also be specified by appending ":" and the custom
   * method name or "*" to indicate any custom method (including no custom
   * method).  For example, "/&#42;&#47;projects/{project_id}/&#42;*:*" extracts
   * `{project_id}` for any version, resource and custom method that includes
   * it.  By default, any custom method will be matched.
   * Examples:
   *   - "/v1/{name=messages/&#42;}": extracts a name like "messages/12345".
   *   - "/v1/messages/{message_id}": extracts a message_id like "12345".
   *   - "/v1/users/{user_id}/messages/{message_id}": extracts two key values.
   * </pre>
   *
   * <code>repeated string path_patterns = 2;</code>
   */
  public com.google.protobuf.ProtocolStringList
      getPathPatternsList() {
    return pathPatterns_;
  }
  /**
   * <pre>
   * path_pattern is an ordered list of path template patterns for the desired
   * value.  If any path_pattern values are specified, then at least one must
   * match, and the last one wins and sets any specified variables.  A path
   * consists of segments separated by slashes. Each segment is matched against
   * the segment in the pattern as follows:
   *   - "*": Matches any single segment.
   *   - "**": Matches zero or more segments (first or last part of path only).
   *   - "{&lt;name&gt;=...}": One or more segment capture, where "..." can be any
   *      template that does not include a capture.
   *   - "{&lt;name&gt;}": A single segment capture. Identical to {&lt;name&gt;=*}.
   * A custom method may also be specified by appending ":" and the custom
   * method name or "*" to indicate any custom method (including no custom
   * method).  For example, "/&#42;&#47;projects/{project_id}/&#42;*:*" extracts
   * `{project_id}` for any version, resource and custom method that includes
   * it.  By default, any custom method will be matched.
   * Examples:
   *   - "/v1/{name=messages/&#42;}": extracts a name like "messages/12345".
   *   - "/v1/messages/{message_id}": extracts a message_id like "12345".
   *   - "/v1/users/{user_id}/messages/{message_id}": extracts two key values.
   * </pre>
   *
   * <code>repeated string path_patterns = 2;</code>
   */
  public int getPathPatternsCount() {
    return pathPatterns_.size();
  }
  /**
   * <pre>
   * path_pattern is an ordered list of path template patterns for the desired
   * value.  If any path_pattern values are specified, then at least one must
   * match, and the last one wins and sets any specified variables.  A path
   * consists of segments separated by slashes. Each segment is matched against
   * the segment in the pattern as follows:
   *   - "*": Matches any single segment.
   *   - "**": Matches zero or more segments (first or last part of path only).
   *   - "{&lt;name&gt;=...}": One or more segment capture, where "..." can be any
   *      template that does not include a capture.
   *   - "{&lt;name&gt;}": A single segment capture. Identical to {&lt;name&gt;=*}.
   * A custom method may also be specified by appending ":" and the custom
   * method name or "*" to indicate any custom method (including no custom
   * method).  For example, "/&#42;&#47;projects/{project_id}/&#42;*:*" extracts
   * `{project_id}` for any version, resource and custom method that includes
   * it.  By default, any custom method will be matched.
   * Examples:
   *   - "/v1/{name=messages/&#42;}": extracts a name like "messages/12345".
   *   - "/v1/messages/{message_id}": extracts a message_id like "12345".
   *   - "/v1/users/{user_id}/messages/{message_id}": extracts two key values.
   * </pre>
   *
   * <code>repeated string path_patterns = 2;</code>
   */
  public String getPathPatterns(int index) {
    return pathPatterns_.get(index);
  }
  /**
   * <pre>
   * path_pattern is an ordered list of path template patterns for the desired
   * value.  If any path_pattern values are specified, then at least one must
   * match, and the last one wins and sets any specified variables.  A path
   * consists of segments separated by slashes. Each segment is matched against
   * the segment in the pattern as follows:
   *   - "*": Matches any single segment.
   *   - "**": Matches zero or more segments (first or last part of path only).
   *   - "{&lt;name&gt;=...}": One or more segment capture, where "..." can be any
   *      template that does not include a capture.
   *   - "{&lt;name&gt;}": A single segment capture. Identical to {&lt;name&gt;=*}.
   * A custom method may also be specified by appending ":" and the custom
   * method name or "*" to indicate any custom method (including no custom
   * method).  For example, "/&#42;&#47;projects/{project_id}/&#42;*:*" extracts
   * `{project_id}` for any version, resource and custom method that includes
   * it.  By default, any custom method will be matched.
   * Examples:
   *   - "/v1/{name=messages/&#42;}": extracts a name like "messages/12345".
   *   - "/v1/messages/{message_id}": extracts a message_id like "12345".
   *   - "/v1/users/{user_id}/messages/{message_id}": extracts two key values.
   * </pre>
   *
   * <code>repeated string path_patterns = 2;</code>
   */
  public com.google.protobuf.ByteString
      getPathPatternsBytes(int index) {
    return pathPatterns_.getByteString(index);
  }

  public static final int QUERY_PARAMETERS_FIELD_NUMBER = 3;
  private java.util.List<NameMatcher> queryParameters_;
  /**
   * <pre>
   * List of query parameter names to try to match.
   * For example: ["parent", "name", "resource.name"]
   * We extract all the specified query_parameters (case-sensitively).  If any
   * are marked as "required_match" and are not present, this keybuilder fails
   * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
   * will report it as a comma-separated string (foo=a,b).
   * </pre>
   *
   * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
   */
  public java.util.List<NameMatcher> getQueryParametersList() {
    return queryParameters_;
  }
  /**
   * <pre>
   * List of query parameter names to try to match.
   * For example: ["parent", "name", "resource.name"]
   * We extract all the specified query_parameters (case-sensitively).  If any
   * are marked as "required_match" and are not present, this keybuilder fails
   * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
   * will report it as a comma-separated string (foo=a,b).
   * </pre>
   *
   * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
   */
  public java.util.List<? extends NameMatcherOrBuilder>
      getQueryParametersOrBuilderList() {
    return queryParameters_;
  }
  /**
   * <pre>
   * List of query parameter names to try to match.
   * For example: ["parent", "name", "resource.name"]
   * We extract all the specified query_parameters (case-sensitively).  If any
   * are marked as "required_match" and are not present, this keybuilder fails
   * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
   * will report it as a comma-separated string (foo=a,b).
   * </pre>
   *
   * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
   */
  public int getQueryParametersCount() {
    return queryParameters_.size();
  }
  /**
   * <pre>
   * List of query parameter names to try to match.
   * For example: ["parent", "name", "resource.name"]
   * We extract all the specified query_parameters (case-sensitively).  If any
   * are marked as "required_match" and are not present, this keybuilder fails
   * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
   * will report it as a comma-separated string (foo=a,b).
   * </pre>
   *
   * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
   */
  public NameMatcher getQueryParameters(int index) {
    return queryParameters_.get(index);
  }
  /**
   * <pre>
   * List of query parameter names to try to match.
   * For example: ["parent", "name", "resource.name"]
   * We extract all the specified query_parameters (case-sensitively).  If any
   * are marked as "required_match" and are not present, this keybuilder fails
   * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
   * will report it as a comma-separated string (foo=a,b).
   * </pre>
   *
   * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
   */
  public NameMatcherOrBuilder getQueryParametersOrBuilder(
      int index) {
    return queryParameters_.get(index);
  }

  public static final int HEADERS_FIELD_NUMBER = 4;
  private java.util.List<NameMatcher> headers_;
  /**
   * <pre>
   * List of headers to try to match.
   * We extract all the specified header values (case-insensitively).  If any
   * are marked as "required_match" and are not present, this keybuilder fails
   * to match.  If a given header appears multiple times in the request we will
   * report it as a comma-separated string, in standard HTTP fashion.
   * </pre>
   *
   * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
   */
  public java.util.List<NameMatcher> getHeadersList() {
    return headers_;
  }
  /**
   * <pre>
   * List of headers to try to match.
   * We extract all the specified header values (case-insensitively).  If any
   * are marked as "required_match" and are not present, this keybuilder fails
   * to match.  If a given header appears multiple times in the request we will
   * report it as a comma-separated string, in standard HTTP fashion.
   * </pre>
   *
   * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
   */
  public java.util.List<? extends NameMatcherOrBuilder>
      getHeadersOrBuilderList() {
    return headers_;
  }
  /**
   * <pre>
   * List of headers to try to match.
   * We extract all the specified header values (case-insensitively).  If any
   * are marked as "required_match" and are not present, this keybuilder fails
   * to match.  If a given header appears multiple times in the request we will
   * report it as a comma-separated string, in standard HTTP fashion.
   * </pre>
   *
   * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
   */
  public int getHeadersCount() {
    return headers_.size();
  }
  /**
   * <pre>
   * List of headers to try to match.
   * We extract all the specified header values (case-insensitively).  If any
   * are marked as "required_match" and are not present, this keybuilder fails
   * to match.  If a given header appears multiple times in the request we will
   * report it as a comma-separated string, in standard HTTP fashion.
   * </pre>
   *
   * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
   */
  public NameMatcher getHeaders(int index) {
    return headers_.get(index);
  }
  /**
   * <pre>
   * List of headers to try to match.
   * We extract all the specified header values (case-insensitively).  If any
   * are marked as "required_match" and are not present, this keybuilder fails
   * to match.  If a given header appears multiple times in the request we will
   * report it as a comma-separated string, in standard HTTP fashion.
   * </pre>
   *
   * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
   */
  public NameMatcherOrBuilder getHeadersOrBuilder(
      int index) {
    return headers_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < hostPatterns_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, hostPatterns_.getRaw(i));
    }
    for (int i = 0; i < pathPatterns_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, pathPatterns_.getRaw(i));
    }
    for (int i = 0; i < queryParameters_.size(); i++) {
      output.writeMessage(3, queryParameters_.get(i));
    }
    for (int i = 0; i < headers_.size(); i++) {
      output.writeMessage(4, headers_.get(i));
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      for (int i = 0; i < hostPatterns_.size(); i++) {
        dataSize += computeStringSizeNoTag(hostPatterns_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getHostPatternsList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < pathPatterns_.size(); i++) {
        dataSize += computeStringSizeNoTag(pathPatterns_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getPathPatternsList().size();
    }
    for (int i = 0; i < queryParameters_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, queryParameters_.get(i));
    }
    for (int i = 0; i < headers_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, headers_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof HttpKeyBuilder)) {
      return super.equals(obj);
    }
    HttpKeyBuilder other = (HttpKeyBuilder) obj;

    boolean result = true;
    result = result && getHostPatternsList()
        .equals(other.getHostPatternsList());
    result = result && getPathPatternsList()
        .equals(other.getPathPatternsList());
    result = result && getQueryParametersList()
        .equals(other.getQueryParametersList());
    result = result && getHeadersList()
        .equals(other.getHeadersList());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getHostPatternsCount() > 0) {
      hash = (37 * hash) + HOST_PATTERNS_FIELD_NUMBER;
      hash = (53 * hash) + getHostPatternsList().hashCode();
    }
    if (getPathPatternsCount() > 0) {
      hash = (37 * hash) + PATH_PATTERNS_FIELD_NUMBER;
      hash = (53 * hash) + getPathPatternsList().hashCode();
    }
    if (getQueryParametersCount() > 0) {
      hash = (37 * hash) + QUERY_PARAMETERS_FIELD_NUMBER;
      hash = (53 * hash) + getQueryParametersList().hashCode();
    }
    if (getHeadersCount() > 0) {
      hash = (37 * hash) + HEADERS_FIELD_NUMBER;
      hash = (53 * hash) + getHeadersList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static HttpKeyBuilder parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static HttpKeyBuilder parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static HttpKeyBuilder parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static HttpKeyBuilder parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static HttpKeyBuilder parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static HttpKeyBuilder parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static HttpKeyBuilder parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static HttpKeyBuilder parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static HttpKeyBuilder parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static HttpKeyBuilder parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static HttpKeyBuilder parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static HttpKeyBuilder parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(HttpKeyBuilder prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * An HttpKeyBuilder applies to a given HTTP URL and headers.
   * Path and host patterns use the matching syntax from gRPC transcoding to
   * extract named key/value pairs from the path and host components of the URL:
   * https://github.com/googleapis/googleapis/blob/master/google/api/http.proto
   * It is invalid to specify the same key name in multiple places in a pattern.
   * For a service where the project id can be expressed either as a subdomain or
   * in the path, separate HttpKeyBuilders must be used:
   *     host_pattern: 'example.com' path_pattern: '/{id}/{object}/&#42;*'
   *     host_pattern: '{id}.example.com' path_pattern: '/{object}/&#42;*'
   * If the host is exactly 'example.com', the first path segment will be used as
   * the id and the second segment as the object. If the host has a subdomain, the
   * subdomain will be used as the id and the first segment as the object. If
   * neither pattern matches, no keys will be extracted.
   * </pre>
   *
   * Protobuf type {@code grpc.lookup.v1.HttpKeyBuilder}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:grpc.lookup.v1.HttpKeyBuilder)
      HttpKeyBuilderOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return RlsConfigProto.internal_static_grpc_lookup_v1_HttpKeyBuilder_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return RlsConfigProto.internal_static_grpc_lookup_v1_HttpKeyBuilder_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              HttpKeyBuilder.class, Builder.class);
    }

    // Construct using io.grpc.lookup.v1.HttpKeyBuilder.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getQueryParametersFieldBuilder();
        getHeadersFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      hostPatterns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      pathPatterns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      if (queryParametersBuilder_ == null) {
        queryParameters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        queryParametersBuilder_.clear();
      }
      if (headersBuilder_ == null) {
        headers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
      } else {
        headersBuilder_.clear();
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return RlsConfigProto.internal_static_grpc_lookup_v1_HttpKeyBuilder_descriptor;
    }

    public HttpKeyBuilder getDefaultInstanceForType() {
      return HttpKeyBuilder.getDefaultInstance();
    }

    public HttpKeyBuilder build() {
      HttpKeyBuilder result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public HttpKeyBuilder buildPartial() {
      HttpKeyBuilder result = new HttpKeyBuilder(this);
      int from_bitField0_ = bitField0_;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        hostPatterns_ = hostPatterns_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.hostPatterns_ = hostPatterns_;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        pathPatterns_ = pathPatterns_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.pathPatterns_ = pathPatterns_;
      if (queryParametersBuilder_ == null) {
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          queryParameters_ = java.util.Collections.unmodifiableList(queryParameters_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.queryParameters_ = queryParameters_;
      } else {
        result.queryParameters_ = queryParametersBuilder_.build();
      }
      if (headersBuilder_ == null) {
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          headers_ = java.util.Collections.unmodifiableList(headers_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.headers_ = headers_;
      } else {
        result.headers_ = headersBuilder_.build();
      }
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof HttpKeyBuilder) {
        return mergeFrom((HttpKeyBuilder)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(HttpKeyBuilder other) {
      if (other == HttpKeyBuilder.getDefaultInstance()) return this;
      if (!other.hostPatterns_.isEmpty()) {
        if (hostPatterns_.isEmpty()) {
          hostPatterns_ = other.hostPatterns_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureHostPatternsIsMutable();
          hostPatterns_.addAll(other.hostPatterns_);
        }
        onChanged();
      }
      if (!other.pathPatterns_.isEmpty()) {
        if (pathPatterns_.isEmpty()) {
          pathPatterns_ = other.pathPatterns_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensurePathPatternsIsMutable();
          pathPatterns_.addAll(other.pathPatterns_);
        }
        onChanged();
      }
      if (queryParametersBuilder_ == null) {
        if (!other.queryParameters_.isEmpty()) {
          if (queryParameters_.isEmpty()) {
            queryParameters_ = other.queryParameters_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureQueryParametersIsMutable();
            queryParameters_.addAll(other.queryParameters_);
          }
          onChanged();
        }
      } else {
        if (!other.queryParameters_.isEmpty()) {
          if (queryParametersBuilder_.isEmpty()) {
            queryParametersBuilder_.dispose();
            queryParametersBuilder_ = null;
            queryParameters_ = other.queryParameters_;
            bitField0_ = (bitField0_ & ~0x00000004);
            queryParametersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getQueryParametersFieldBuilder() : null;
          } else {
            queryParametersBuilder_.addAllMessages(other.queryParameters_);
          }
        }
      }
      if (headersBuilder_ == null) {
        if (!other.headers_.isEmpty()) {
          if (headers_.isEmpty()) {
            headers_ = other.headers_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureHeadersIsMutable();
            headers_.addAll(other.headers_);
          }
          onChanged();
        }
      } else {
        if (!other.headers_.isEmpty()) {
          if (headersBuilder_.isEmpty()) {
            headersBuilder_.dispose();
            headersBuilder_ = null;
            headers_ = other.headers_;
            bitField0_ = (bitField0_ & ~0x00000008);
            headersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getHeadersFieldBuilder() : null;
          } else {
            headersBuilder_.addAllMessages(other.headers_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      HttpKeyBuilder parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (HttpKeyBuilder) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.LazyStringList hostPatterns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureHostPatternsIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        hostPatterns_ = new com.google.protobuf.LazyStringArrayList(hostPatterns_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * host_pattern is an ordered list of host template patterns for the desired
     * value.  If any host_pattern values are specified, then at least one must
     * match, and the last one wins and sets any specified variables.  A host
     * consists of labels separated by dots. Each label is matched against the
     * label in the pattern as follows:
     *   - "*": Matches any single label.
     *   - "**": Matches zero or more labels (first or last part of host only).
     *   - "{&lt;name&gt;=...}": One or more label capture, where "..." can be any
     *      template that does not include a capture.
     *   - "{&lt;name&gt;}": A single label capture. Identical to {&lt;name&gt;=*}.
     * Examples:
     *   - "example.com": Only applies to the exact host example.com.
     *   - "*.example.com": Matches subdomains of example.com.
     *   - "**.example.com": matches example.com, and all levels of subdomains.
     *   - "{project}.example.com": Extracts the third level subdomain.
     *   - "{project=**}.example.com": Extracts the third level+ subdomains.
     *   - "{project=**}": Extracts the entire host.
     * </pre>
     *
     * <code>repeated string host_patterns = 1;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getHostPatternsList() {
      return hostPatterns_.getUnmodifiableView();
    }
    /**
     * <pre>
     * host_pattern is an ordered list of host template patterns for the desired
     * value.  If any host_pattern values are specified, then at least one must
     * match, and the last one wins and sets any specified variables.  A host
     * consists of labels separated by dots. Each label is matched against the
     * label in the pattern as follows:
     *   - "*": Matches any single label.
     *   - "**": Matches zero or more labels (first or last part of host only).
     *   - "{&lt;name&gt;=...}": One or more label capture, where "..." can be any
     *      template that does not include a capture.
     *   - "{&lt;name&gt;}": A single label capture. Identical to {&lt;name&gt;=*}.
     * Examples:
     *   - "example.com": Only applies to the exact host example.com.
     *   - "*.example.com": Matches subdomains of example.com.
     *   - "**.example.com": matches example.com, and all levels of subdomains.
     *   - "{project}.example.com": Extracts the third level subdomain.
     *   - "{project=**}.example.com": Extracts the third level+ subdomains.
     *   - "{project=**}": Extracts the entire host.
     * </pre>
     *
     * <code>repeated string host_patterns = 1;</code>
     */
    public int getHostPatternsCount() {
      return hostPatterns_.size();
    }
    /**
     * <pre>
     * host_pattern is an ordered list of host template patterns for the desired
     * value.  If any host_pattern values are specified, then at least one must
     * match, and the last one wins and sets any specified variables.  A host
     * consists of labels separated by dots. Each label is matched against the
     * label in the pattern as follows:
     *   - "*": Matches any single label.
     *   - "**": Matches zero or more labels (first or last part of host only).
     *   - "{&lt;name&gt;=...}": One or more label capture, where "..." can be any
     *      template that does not include a capture.
     *   - "{&lt;name&gt;}": A single label capture. Identical to {&lt;name&gt;=*}.
     * Examples:
     *   - "example.com": Only applies to the exact host example.com.
     *   - "*.example.com": Matches subdomains of example.com.
     *   - "**.example.com": matches example.com, and all levels of subdomains.
     *   - "{project}.example.com": Extracts the third level subdomain.
     *   - "{project=**}.example.com": Extracts the third level+ subdomains.
     *   - "{project=**}": Extracts the entire host.
     * </pre>
     *
     * <code>repeated string host_patterns = 1;</code>
     */
    public String getHostPatterns(int index) {
      return hostPatterns_.get(index);
    }
    /**
     * <pre>
     * host_pattern is an ordered list of host template patterns for the desired
     * value.  If any host_pattern values are specified, then at least one must
     * match, and the last one wins and sets any specified variables.  A host
     * consists of labels separated by dots. Each label is matched against the
     * label in the pattern as follows:
     *   - "*": Matches any single label.
     *   - "**": Matches zero or more labels (first or last part of host only).
     *   - "{&lt;name&gt;=...}": One or more label capture, where "..." can be any
     *      template that does not include a capture.
     *   - "{&lt;name&gt;}": A single label capture. Identical to {&lt;name&gt;=*}.
     * Examples:
     *   - "example.com": Only applies to the exact host example.com.
     *   - "*.example.com": Matches subdomains of example.com.
     *   - "**.example.com": matches example.com, and all levels of subdomains.
     *   - "{project}.example.com": Extracts the third level subdomain.
     *   - "{project=**}.example.com": Extracts the third level+ subdomains.
     *   - "{project=**}": Extracts the entire host.
     * </pre>
     *
     * <code>repeated string host_patterns = 1;</code>
     */
    public com.google.protobuf.ByteString
        getHostPatternsBytes(int index) {
      return hostPatterns_.getByteString(index);
    }
    /**
     * <pre>
     * host_pattern is an ordered list of host template patterns for the desired
     * value.  If any host_pattern values are specified, then at least one must
     * match, and the last one wins and sets any specified variables.  A host
     * consists of labels separated by dots. Each label is matched against the
     * label in the pattern as follows:
     *   - "*": Matches any single label.
     *   - "**": Matches zero or more labels (first or last part of host only).
     *   - "{&lt;name&gt;=...}": One or more label capture, where "..." can be any
     *      template that does not include a capture.
     *   - "{&lt;name&gt;}": A single label capture. Identical to {&lt;name&gt;=*}.
     * Examples:
     *   - "example.com": Only applies to the exact host example.com.
     *   - "*.example.com": Matches subdomains of example.com.
     *   - "**.example.com": matches example.com, and all levels of subdomains.
     *   - "{project}.example.com": Extracts the third level subdomain.
     *   - "{project=**}.example.com": Extracts the third level+ subdomains.
     *   - "{project=**}": Extracts the entire host.
     * </pre>
     *
     * <code>repeated string host_patterns = 1;</code>
     */
    public Builder setHostPatterns(
        int index, String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureHostPatternsIsMutable();
      hostPatterns_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * host_pattern is an ordered list of host template patterns for the desired
     * value.  If any host_pattern values are specified, then at least one must
     * match, and the last one wins and sets any specified variables.  A host
     * consists of labels separated by dots. Each label is matched against the
     * label in the pattern as follows:
     *   - "*": Matches any single label.
     *   - "**": Matches zero or more labels (first or last part of host only).
     *   - "{&lt;name&gt;=...}": One or more label capture, where "..." can be any
     *      template that does not include a capture.
     *   - "{&lt;name&gt;}": A single label capture. Identical to {&lt;name&gt;=*}.
     * Examples:
     *   - "example.com": Only applies to the exact host example.com.
     *   - "*.example.com": Matches subdomains of example.com.
     *   - "**.example.com": matches example.com, and all levels of subdomains.
     *   - "{project}.example.com": Extracts the third level subdomain.
     *   - "{project=**}.example.com": Extracts the third level+ subdomains.
     *   - "{project=**}": Extracts the entire host.
     * </pre>
     *
     * <code>repeated string host_patterns = 1;</code>
     */
    public Builder addHostPatterns(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureHostPatternsIsMutable();
      hostPatterns_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * host_pattern is an ordered list of host template patterns for the desired
     * value.  If any host_pattern values are specified, then at least one must
     * match, and the last one wins and sets any specified variables.  A host
     * consists of labels separated by dots. Each label is matched against the
     * label in the pattern as follows:
     *   - "*": Matches any single label.
     *   - "**": Matches zero or more labels (first or last part of host only).
     *   - "{&lt;name&gt;=...}": One or more label capture, where "..." can be any
     *      template that does not include a capture.
     *   - "{&lt;name&gt;}": A single label capture. Identical to {&lt;name&gt;=*}.
     * Examples:
     *   - "example.com": Only applies to the exact host example.com.
     *   - "*.example.com": Matches subdomains of example.com.
     *   - "**.example.com": matches example.com, and all levels of subdomains.
     *   - "{project}.example.com": Extracts the third level subdomain.
     *   - "{project=**}.example.com": Extracts the third level+ subdomains.
     *   - "{project=**}": Extracts the entire host.
     * </pre>
     *
     * <code>repeated string host_patterns = 1;</code>
     */
    public Builder addAllHostPatterns(
        Iterable<String> values) {
      ensureHostPatternsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, hostPatterns_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * host_pattern is an ordered list of host template patterns for the desired
     * value.  If any host_pattern values are specified, then at least one must
     * match, and the last one wins and sets any specified variables.  A host
     * consists of labels separated by dots. Each label is matched against the
     * label in the pattern as follows:
     *   - "*": Matches any single label.
     *   - "**": Matches zero or more labels (first or last part of host only).
     *   - "{&lt;name&gt;=...}": One or more label capture, where "..." can be any
     *      template that does not include a capture.
     *   - "{&lt;name&gt;}": A single label capture. Identical to {&lt;name&gt;=*}.
     * Examples:
     *   - "example.com": Only applies to the exact host example.com.
     *   - "*.example.com": Matches subdomains of example.com.
     *   - "**.example.com": matches example.com, and all levels of subdomains.
     *   - "{project}.example.com": Extracts the third level subdomain.
     *   - "{project=**}.example.com": Extracts the third level+ subdomains.
     *   - "{project=**}": Extracts the entire host.
     * </pre>
     *
     * <code>repeated string host_patterns = 1;</code>
     */
    public Builder clearHostPatterns() {
      hostPatterns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * host_pattern is an ordered list of host template patterns for the desired
     * value.  If any host_pattern values are specified, then at least one must
     * match, and the last one wins and sets any specified variables.  A host
     * consists of labels separated by dots. Each label is matched against the
     * label in the pattern as follows:
     *   - "*": Matches any single label.
     *   - "**": Matches zero or more labels (first or last part of host only).
     *   - "{&lt;name&gt;=...}": One or more label capture, where "..." can be any
     *      template that does not include a capture.
     *   - "{&lt;name&gt;}": A single label capture. Identical to {&lt;name&gt;=*}.
     * Examples:
     *   - "example.com": Only applies to the exact host example.com.
     *   - "*.example.com": Matches subdomains of example.com.
     *   - "**.example.com": matches example.com, and all levels of subdomains.
     *   - "{project}.example.com": Extracts the third level subdomain.
     *   - "{project=**}.example.com": Extracts the third level+ subdomains.
     *   - "{project=**}": Extracts the entire host.
     * </pre>
     *
     * <code>repeated string host_patterns = 1;</code>
     */
    public Builder addHostPatternsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureHostPatternsIsMutable();
      hostPatterns_.add(value);
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList pathPatterns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensurePathPatternsIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        pathPatterns_ = new com.google.protobuf.LazyStringArrayList(pathPatterns_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <pre>
     * path_pattern is an ordered list of path template patterns for the desired
     * value.  If any path_pattern values are specified, then at least one must
     * match, and the last one wins and sets any specified variables.  A path
     * consists of segments separated by slashes. Each segment is matched against
     * the segment in the pattern as follows:
     *   - "*": Matches any single segment.
     *   - "**": Matches zero or more segments (first or last part of path only).
     *   - "{&lt;name&gt;=...}": One or more segment capture, where "..." can be any
     *      template that does not include a capture.
     *   - "{&lt;name&gt;}": A single segment capture. Identical to {&lt;name&gt;=*}.
     * A custom method may also be specified by appending ":" and the custom
     * method name or "*" to indicate any custom method (including no custom
     * method).  For example, "/&#42;&#47;projects/{project_id}/&#42;*:*" extracts
     * `{project_id}` for any version, resource and custom method that includes
     * it.  By default, any custom method will be matched.
     * Examples:
     *   - "/v1/{name=messages/&#42;}": extracts a name like "messages/12345".
     *   - "/v1/messages/{message_id}": extracts a message_id like "12345".
     *   - "/v1/users/{user_id}/messages/{message_id}": extracts two key values.
     * </pre>
     *
     * <code>repeated string path_patterns = 2;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getPathPatternsList() {
      return pathPatterns_.getUnmodifiableView();
    }
    /**
     * <pre>
     * path_pattern is an ordered list of path template patterns for the desired
     * value.  If any path_pattern values are specified, then at least one must
     * match, and the last one wins and sets any specified variables.  A path
     * consists of segments separated by slashes. Each segment is matched against
     * the segment in the pattern as follows:
     *   - "*": Matches any single segment.
     *   - "**": Matches zero or more segments (first or last part of path only).
     *   - "{&lt;name&gt;=...}": One or more segment capture, where "..." can be any
     *      template that does not include a capture.
     *   - "{&lt;name&gt;}": A single segment capture. Identical to {&lt;name&gt;=*}.
     * A custom method may also be specified by appending ":" and the custom
     * method name or "*" to indicate any custom method (including no custom
     * method).  For example, "/&#42;&#47;projects/{project_id}/&#42;*:*" extracts
     * `{project_id}` for any version, resource and custom method that includes
     * it.  By default, any custom method will be matched.
     * Examples:
     *   - "/v1/{name=messages/&#42;}": extracts a name like "messages/12345".
     *   - "/v1/messages/{message_id}": extracts a message_id like "12345".
     *   - "/v1/users/{user_id}/messages/{message_id}": extracts two key values.
     * </pre>
     *
     * <code>repeated string path_patterns = 2;</code>
     */
    public int getPathPatternsCount() {
      return pathPatterns_.size();
    }
    /**
     * <pre>
     * path_pattern is an ordered list of path template patterns for the desired
     * value.  If any path_pattern values are specified, then at least one must
     * match, and the last one wins and sets any specified variables.  A path
     * consists of segments separated by slashes. Each segment is matched against
     * the segment in the pattern as follows:
     *   - "*": Matches any single segment.
     *   - "**": Matches zero or more segments (first or last part of path only).
     *   - "{&lt;name&gt;=...}": One or more segment capture, where "..." can be any
     *      template that does not include a capture.
     *   - "{&lt;name&gt;}": A single segment capture. Identical to {&lt;name&gt;=*}.
     * A custom method may also be specified by appending ":" and the custom
     * method name or "*" to indicate any custom method (including no custom
     * method).  For example, "/&#42;&#47;projects/{project_id}/&#42;*:*" extracts
     * `{project_id}` for any version, resource and custom method that includes
     * it.  By default, any custom method will be matched.
     * Examples:
     *   - "/v1/{name=messages/&#42;}": extracts a name like "messages/12345".
     *   - "/v1/messages/{message_id}": extracts a message_id like "12345".
     *   - "/v1/users/{user_id}/messages/{message_id}": extracts two key values.
     * </pre>
     *
     * <code>repeated string path_patterns = 2;</code>
     */
    public String getPathPatterns(int index) {
      return pathPatterns_.get(index);
    }
    /**
     * <pre>
     * path_pattern is an ordered list of path template patterns for the desired
     * value.  If any path_pattern values are specified, then at least one must
     * match, and the last one wins and sets any specified variables.  A path
     * consists of segments separated by slashes. Each segment is matched against
     * the segment in the pattern as follows:
     *   - "*": Matches any single segment.
     *   - "**": Matches zero or more segments (first or last part of path only).
     *   - "{&lt;name&gt;=...}": One or more segment capture, where "..." can be any
     *      template that does not include a capture.
     *   - "{&lt;name&gt;}": A single segment capture. Identical to {&lt;name&gt;=*}.
     * A custom method may also be specified by appending ":" and the custom
     * method name or "*" to indicate any custom method (including no custom
     * method).  For example, "/&#42;&#47;projects/{project_id}/&#42;*:*" extracts
     * `{project_id}` for any version, resource and custom method that includes
     * it.  By default, any custom method will be matched.
     * Examples:
     *   - "/v1/{name=messages/&#42;}": extracts a name like "messages/12345".
     *   - "/v1/messages/{message_id}": extracts a message_id like "12345".
     *   - "/v1/users/{user_id}/messages/{message_id}": extracts two key values.
     * </pre>
     *
     * <code>repeated string path_patterns = 2;</code>
     */
    public com.google.protobuf.ByteString
        getPathPatternsBytes(int index) {
      return pathPatterns_.getByteString(index);
    }
    /**
     * <pre>
     * path_pattern is an ordered list of path template patterns for the desired
     * value.  If any path_pattern values are specified, then at least one must
     * match, and the last one wins and sets any specified variables.  A path
     * consists of segments separated by slashes. Each segment is matched against
     * the segment in the pattern as follows:
     *   - "*": Matches any single segment.
     *   - "**": Matches zero or more segments (first or last part of path only).
     *   - "{&lt;name&gt;=...}": One or more segment capture, where "..." can be any
     *      template that does not include a capture.
     *   - "{&lt;name&gt;}": A single segment capture. Identical to {&lt;name&gt;=*}.
     * A custom method may also be specified by appending ":" and the custom
     * method name or "*" to indicate any custom method (including no custom
     * method).  For example, "/&#42;&#47;projects/{project_id}/&#42;*:*" extracts
     * `{project_id}` for any version, resource and custom method that includes
     * it.  By default, any custom method will be matched.
     * Examples:
     *   - "/v1/{name=messages/&#42;}": extracts a name like "messages/12345".
     *   - "/v1/messages/{message_id}": extracts a message_id like "12345".
     *   - "/v1/users/{user_id}/messages/{message_id}": extracts two key values.
     * </pre>
     *
     * <code>repeated string path_patterns = 2;</code>
     */
    public Builder setPathPatterns(
        int index, String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensurePathPatternsIsMutable();
      pathPatterns_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * path_pattern is an ordered list of path template patterns for the desired
     * value.  If any path_pattern values are specified, then at least one must
     * match, and the last one wins and sets any specified variables.  A path
     * consists of segments separated by slashes. Each segment is matched against
     * the segment in the pattern as follows:
     *   - "*": Matches any single segment.
     *   - "**": Matches zero or more segments (first or last part of path only).
     *   - "{&lt;name&gt;=...}": One or more segment capture, where "..." can be any
     *      template that does not include a capture.
     *   - "{&lt;name&gt;}": A single segment capture. Identical to {&lt;name&gt;=*}.
     * A custom method may also be specified by appending ":" and the custom
     * method name or "*" to indicate any custom method (including no custom
     * method).  For example, "/&#42;&#47;projects/{project_id}/&#42;*:*" extracts
     * `{project_id}` for any version, resource and custom method that includes
     * it.  By default, any custom method will be matched.
     * Examples:
     *   - "/v1/{name=messages/&#42;}": extracts a name like "messages/12345".
     *   - "/v1/messages/{message_id}": extracts a message_id like "12345".
     *   - "/v1/users/{user_id}/messages/{message_id}": extracts two key values.
     * </pre>
     *
     * <code>repeated string path_patterns = 2;</code>
     */
    public Builder addPathPatterns(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensurePathPatternsIsMutable();
      pathPatterns_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * path_pattern is an ordered list of path template patterns for the desired
     * value.  If any path_pattern values are specified, then at least one must
     * match, and the last one wins and sets any specified variables.  A path
     * consists of segments separated by slashes. Each segment is matched against
     * the segment in the pattern as follows:
     *   - "*": Matches any single segment.
     *   - "**": Matches zero or more segments (first or last part of path only).
     *   - "{&lt;name&gt;=...}": One or more segment capture, where "..." can be any
     *      template that does not include a capture.
     *   - "{&lt;name&gt;}": A single segment capture. Identical to {&lt;name&gt;=*}.
     * A custom method may also be specified by appending ":" and the custom
     * method name or "*" to indicate any custom method (including no custom
     * method).  For example, "/&#42;&#47;projects/{project_id}/&#42;*:*" extracts
     * `{project_id}` for any version, resource and custom method that includes
     * it.  By default, any custom method will be matched.
     * Examples:
     *   - "/v1/{name=messages/&#42;}": extracts a name like "messages/12345".
     *   - "/v1/messages/{message_id}": extracts a message_id like "12345".
     *   - "/v1/users/{user_id}/messages/{message_id}": extracts two key values.
     * </pre>
     *
     * <code>repeated string path_patterns = 2;</code>
     */
    public Builder addAllPathPatterns(
        Iterable<String> values) {
      ensurePathPatternsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, pathPatterns_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * path_pattern is an ordered list of path template patterns for the desired
     * value.  If any path_pattern values are specified, then at least one must
     * match, and the last one wins and sets any specified variables.  A path
     * consists of segments separated by slashes. Each segment is matched against
     * the segment in the pattern as follows:
     *   - "*": Matches any single segment.
     *   - "**": Matches zero or more segments (first or last part of path only).
     *   - "{&lt;name&gt;=...}": One or more segment capture, where "..." can be any
     *      template that does not include a capture.
     *   - "{&lt;name&gt;}": A single segment capture. Identical to {&lt;name&gt;=*}.
     * A custom method may also be specified by appending ":" and the custom
     * method name or "*" to indicate any custom method (including no custom
     * method).  For example, "/&#42;&#47;projects/{project_id}/&#42;*:*" extracts
     * `{project_id}` for any version, resource and custom method that includes
     * it.  By default, any custom method will be matched.
     * Examples:
     *   - "/v1/{name=messages/&#42;}": extracts a name like "messages/12345".
     *   - "/v1/messages/{message_id}": extracts a message_id like "12345".
     *   - "/v1/users/{user_id}/messages/{message_id}": extracts two key values.
     * </pre>
     *
     * <code>repeated string path_patterns = 2;</code>
     */
    public Builder clearPathPatterns() {
      pathPatterns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * path_pattern is an ordered list of path template patterns for the desired
     * value.  If any path_pattern values are specified, then at least one must
     * match, and the last one wins and sets any specified variables.  A path
     * consists of segments separated by slashes. Each segment is matched against
     * the segment in the pattern as follows:
     *   - "*": Matches any single segment.
     *   - "**": Matches zero or more segments (first or last part of path only).
     *   - "{&lt;name&gt;=...}": One or more segment capture, where "..." can be any
     *      template that does not include a capture.
     *   - "{&lt;name&gt;}": A single segment capture. Identical to {&lt;name&gt;=*}.
     * A custom method may also be specified by appending ":" and the custom
     * method name or "*" to indicate any custom method (including no custom
     * method).  For example, "/&#42;&#47;projects/{project_id}/&#42;*:*" extracts
     * `{project_id}` for any version, resource and custom method that includes
     * it.  By default, any custom method will be matched.
     * Examples:
     *   - "/v1/{name=messages/&#42;}": extracts a name like "messages/12345".
     *   - "/v1/messages/{message_id}": extracts a message_id like "12345".
     *   - "/v1/users/{user_id}/messages/{message_id}": extracts two key values.
     * </pre>
     *
     * <code>repeated string path_patterns = 2;</code>
     */
    public Builder addPathPatternsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensurePathPatternsIsMutable();
      pathPatterns_.add(value);
      onChanged();
      return this;
    }

    private java.util.List<NameMatcher> queryParameters_ =
      java.util.Collections.emptyList();
    private void ensureQueryParametersIsMutable() {
      if (!((bitField0_ & 0x00000004) == 0x00000004)) {
        queryParameters_ = new java.util.ArrayList<NameMatcher>(queryParameters_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        NameMatcher, NameMatcher.Builder, NameMatcherOrBuilder> queryParametersBuilder_;

    /**
     * <pre>
     * List of query parameter names to try to match.
     * For example: ["parent", "name", "resource.name"]
     * We extract all the specified query_parameters (case-sensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
     * will report it as a comma-separated string (foo=a,b).
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
     */
    public java.util.List<NameMatcher> getQueryParametersList() {
      if (queryParametersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(queryParameters_);
      } else {
        return queryParametersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * List of query parameter names to try to match.
     * For example: ["parent", "name", "resource.name"]
     * We extract all the specified query_parameters (case-sensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
     * will report it as a comma-separated string (foo=a,b).
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
     */
    public int getQueryParametersCount() {
      if (queryParametersBuilder_ == null) {
        return queryParameters_.size();
      } else {
        return queryParametersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * List of query parameter names to try to match.
     * For example: ["parent", "name", "resource.name"]
     * We extract all the specified query_parameters (case-sensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
     * will report it as a comma-separated string (foo=a,b).
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
     */
    public NameMatcher getQueryParameters(int index) {
      if (queryParametersBuilder_ == null) {
        return queryParameters_.get(index);
      } else {
        return queryParametersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * List of query parameter names to try to match.
     * For example: ["parent", "name", "resource.name"]
     * We extract all the specified query_parameters (case-sensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
     * will report it as a comma-separated string (foo=a,b).
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
     */
    public Builder setQueryParameters(
        int index, NameMatcher value) {
      if (queryParametersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureQueryParametersIsMutable();
        queryParameters_.set(index, value);
        onChanged();
      } else {
        queryParametersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of query parameter names to try to match.
     * For example: ["parent", "name", "resource.name"]
     * We extract all the specified query_parameters (case-sensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
     * will report it as a comma-separated string (foo=a,b).
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
     */
    public Builder setQueryParameters(
        int index, NameMatcher.Builder builderForValue) {
      if (queryParametersBuilder_ == null) {
        ensureQueryParametersIsMutable();
        queryParameters_.set(index, builderForValue.build());
        onChanged();
      } else {
        queryParametersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of query parameter names to try to match.
     * For example: ["parent", "name", "resource.name"]
     * We extract all the specified query_parameters (case-sensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
     * will report it as a comma-separated string (foo=a,b).
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
     */
    public Builder addQueryParameters(NameMatcher value) {
      if (queryParametersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureQueryParametersIsMutable();
        queryParameters_.add(value);
        onChanged();
      } else {
        queryParametersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * List of query parameter names to try to match.
     * For example: ["parent", "name", "resource.name"]
     * We extract all the specified query_parameters (case-sensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
     * will report it as a comma-separated string (foo=a,b).
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
     */
    public Builder addQueryParameters(
        int index, NameMatcher value) {
      if (queryParametersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureQueryParametersIsMutable();
        queryParameters_.add(index, value);
        onChanged();
      } else {
        queryParametersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of query parameter names to try to match.
     * For example: ["parent", "name", "resource.name"]
     * We extract all the specified query_parameters (case-sensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
     * will report it as a comma-separated string (foo=a,b).
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
     */
    public Builder addQueryParameters(
        NameMatcher.Builder builderForValue) {
      if (queryParametersBuilder_ == null) {
        ensureQueryParametersIsMutable();
        queryParameters_.add(builderForValue.build());
        onChanged();
      } else {
        queryParametersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of query parameter names to try to match.
     * For example: ["parent", "name", "resource.name"]
     * We extract all the specified query_parameters (case-sensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
     * will report it as a comma-separated string (foo=a,b).
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
     */
    public Builder addQueryParameters(
        int index, NameMatcher.Builder builderForValue) {
      if (queryParametersBuilder_ == null) {
        ensureQueryParametersIsMutable();
        queryParameters_.add(index, builderForValue.build());
        onChanged();
      } else {
        queryParametersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of query parameter names to try to match.
     * For example: ["parent", "name", "resource.name"]
     * We extract all the specified query_parameters (case-sensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
     * will report it as a comma-separated string (foo=a,b).
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
     */
    public Builder addAllQueryParameters(
        Iterable<? extends NameMatcher> values) {
      if (queryParametersBuilder_ == null) {
        ensureQueryParametersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, queryParameters_);
        onChanged();
      } else {
        queryParametersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * List of query parameter names to try to match.
     * For example: ["parent", "name", "resource.name"]
     * We extract all the specified query_parameters (case-sensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
     * will report it as a comma-separated string (foo=a,b).
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
     */
    public Builder clearQueryParameters() {
      if (queryParametersBuilder_ == null) {
        queryParameters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        queryParametersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * List of query parameter names to try to match.
     * For example: ["parent", "name", "resource.name"]
     * We extract all the specified query_parameters (case-sensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
     * will report it as a comma-separated string (foo=a,b).
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
     */
    public Builder removeQueryParameters(int index) {
      if (queryParametersBuilder_ == null) {
        ensureQueryParametersIsMutable();
        queryParameters_.remove(index);
        onChanged();
      } else {
        queryParametersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * List of query parameter names to try to match.
     * For example: ["parent", "name", "resource.name"]
     * We extract all the specified query_parameters (case-sensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
     * will report it as a comma-separated string (foo=a,b).
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
     */
    public NameMatcher.Builder getQueryParametersBuilder(
        int index) {
      return getQueryParametersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * List of query parameter names to try to match.
     * For example: ["parent", "name", "resource.name"]
     * We extract all the specified query_parameters (case-sensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
     * will report it as a comma-separated string (foo=a,b).
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
     */
    public NameMatcherOrBuilder getQueryParametersOrBuilder(
        int index) {
      if (queryParametersBuilder_ == null) {
        return queryParameters_.get(index);  } else {
        return queryParametersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * List of query parameter names to try to match.
     * For example: ["parent", "name", "resource.name"]
     * We extract all the specified query_parameters (case-sensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
     * will report it as a comma-separated string (foo=a,b).
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
     */
    public java.util.List<? extends NameMatcherOrBuilder>
         getQueryParametersOrBuilderList() {
      if (queryParametersBuilder_ != null) {
        return queryParametersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(queryParameters_);
      }
    }
    /**
     * <pre>
     * List of query parameter names to try to match.
     * For example: ["parent", "name", "resource.name"]
     * We extract all the specified query_parameters (case-sensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
     * will report it as a comma-separated string (foo=a,b).
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
     */
    public NameMatcher.Builder addQueryParametersBuilder() {
      return getQueryParametersFieldBuilder().addBuilder(
          NameMatcher.getDefaultInstance());
    }
    /**
     * <pre>
     * List of query parameter names to try to match.
     * For example: ["parent", "name", "resource.name"]
     * We extract all the specified query_parameters (case-sensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
     * will report it as a comma-separated string (foo=a,b).
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
     */
    public NameMatcher.Builder addQueryParametersBuilder(
        int index) {
      return getQueryParametersFieldBuilder().addBuilder(
          index, NameMatcher.getDefaultInstance());
    }
    /**
     * <pre>
     * List of query parameter names to try to match.
     * For example: ["parent", "name", "resource.name"]
     * We extract all the specified query_parameters (case-sensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given parameter appears multiple times (?foo=a&amp;foo=b) we
     * will report it as a comma-separated string (foo=a,b).
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher query_parameters = 3;</code>
     */
    public java.util.List<NameMatcher.Builder>
         getQueryParametersBuilderList() {
      return getQueryParametersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        NameMatcher, NameMatcher.Builder, NameMatcherOrBuilder>
        getQueryParametersFieldBuilder() {
      if (queryParametersBuilder_ == null) {
        queryParametersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            NameMatcher, NameMatcher.Builder, NameMatcherOrBuilder>(
                queryParameters_,
                ((bitField0_ & 0x00000004) == 0x00000004),
                getParentForChildren(),
                isClean());
        queryParameters_ = null;
      }
      return queryParametersBuilder_;
    }

    private java.util.List<NameMatcher> headers_ =
      java.util.Collections.emptyList();
    private void ensureHeadersIsMutable() {
      if (!((bitField0_ & 0x00000008) == 0x00000008)) {
        headers_ = new java.util.ArrayList<NameMatcher>(headers_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        NameMatcher, NameMatcher.Builder, NameMatcherOrBuilder> headersBuilder_;

    /**
     * <pre>
     * List of headers to try to match.
     * We extract all the specified header values (case-insensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given header appears multiple times in the request we will
     * report it as a comma-separated string, in standard HTTP fashion.
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
     */
    public java.util.List<NameMatcher> getHeadersList() {
      if (headersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(headers_);
      } else {
        return headersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * List of headers to try to match.
     * We extract all the specified header values (case-insensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given header appears multiple times in the request we will
     * report it as a comma-separated string, in standard HTTP fashion.
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
     */
    public int getHeadersCount() {
      if (headersBuilder_ == null) {
        return headers_.size();
      } else {
        return headersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * List of headers to try to match.
     * We extract all the specified header values (case-insensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given header appears multiple times in the request we will
     * report it as a comma-separated string, in standard HTTP fashion.
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
     */
    public NameMatcher getHeaders(int index) {
      if (headersBuilder_ == null) {
        return headers_.get(index);
      } else {
        return headersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * List of headers to try to match.
     * We extract all the specified header values (case-insensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given header appears multiple times in the request we will
     * report it as a comma-separated string, in standard HTTP fashion.
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
     */
    public Builder setHeaders(
        int index, NameMatcher value) {
      if (headersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHeadersIsMutable();
        headers_.set(index, value);
        onChanged();
      } else {
        headersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of headers to try to match.
     * We extract all the specified header values (case-insensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given header appears multiple times in the request we will
     * report it as a comma-separated string, in standard HTTP fashion.
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
     */
    public Builder setHeaders(
        int index, NameMatcher.Builder builderForValue) {
      if (headersBuilder_ == null) {
        ensureHeadersIsMutable();
        headers_.set(index, builderForValue.build());
        onChanged();
      } else {
        headersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of headers to try to match.
     * We extract all the specified header values (case-insensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given header appears multiple times in the request we will
     * report it as a comma-separated string, in standard HTTP fashion.
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
     */
    public Builder addHeaders(NameMatcher value) {
      if (headersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHeadersIsMutable();
        headers_.add(value);
        onChanged();
      } else {
        headersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * List of headers to try to match.
     * We extract all the specified header values (case-insensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given header appears multiple times in the request we will
     * report it as a comma-separated string, in standard HTTP fashion.
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
     */
    public Builder addHeaders(
        int index, NameMatcher value) {
      if (headersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHeadersIsMutable();
        headers_.add(index, value);
        onChanged();
      } else {
        headersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of headers to try to match.
     * We extract all the specified header values (case-insensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given header appears multiple times in the request we will
     * report it as a comma-separated string, in standard HTTP fashion.
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
     */
    public Builder addHeaders(
        NameMatcher.Builder builderForValue) {
      if (headersBuilder_ == null) {
        ensureHeadersIsMutable();
        headers_.add(builderForValue.build());
        onChanged();
      } else {
        headersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of headers to try to match.
     * We extract all the specified header values (case-insensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given header appears multiple times in the request we will
     * report it as a comma-separated string, in standard HTTP fashion.
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
     */
    public Builder addHeaders(
        int index, NameMatcher.Builder builderForValue) {
      if (headersBuilder_ == null) {
        ensureHeadersIsMutable();
        headers_.add(index, builderForValue.build());
        onChanged();
      } else {
        headersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of headers to try to match.
     * We extract all the specified header values (case-insensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given header appears multiple times in the request we will
     * report it as a comma-separated string, in standard HTTP fashion.
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
     */
    public Builder addAllHeaders(
        Iterable<? extends NameMatcher> values) {
      if (headersBuilder_ == null) {
        ensureHeadersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, headers_);
        onChanged();
      } else {
        headersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * List of headers to try to match.
     * We extract all the specified header values (case-insensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given header appears multiple times in the request we will
     * report it as a comma-separated string, in standard HTTP fashion.
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
     */
    public Builder clearHeaders() {
      if (headersBuilder_ == null) {
        headers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        headersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * List of headers to try to match.
     * We extract all the specified header values (case-insensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given header appears multiple times in the request we will
     * report it as a comma-separated string, in standard HTTP fashion.
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
     */
    public Builder removeHeaders(int index) {
      if (headersBuilder_ == null) {
        ensureHeadersIsMutable();
        headers_.remove(index);
        onChanged();
      } else {
        headersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * List of headers to try to match.
     * We extract all the specified header values (case-insensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given header appears multiple times in the request we will
     * report it as a comma-separated string, in standard HTTP fashion.
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
     */
    public NameMatcher.Builder getHeadersBuilder(
        int index) {
      return getHeadersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * List of headers to try to match.
     * We extract all the specified header values (case-insensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given header appears multiple times in the request we will
     * report it as a comma-separated string, in standard HTTP fashion.
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
     */
    public NameMatcherOrBuilder getHeadersOrBuilder(
        int index) {
      if (headersBuilder_ == null) {
        return headers_.get(index);  } else {
        return headersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * List of headers to try to match.
     * We extract all the specified header values (case-insensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given header appears multiple times in the request we will
     * report it as a comma-separated string, in standard HTTP fashion.
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
     */
    public java.util.List<? extends NameMatcherOrBuilder>
         getHeadersOrBuilderList() {
      if (headersBuilder_ != null) {
        return headersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(headers_);
      }
    }
    /**
     * <pre>
     * List of headers to try to match.
     * We extract all the specified header values (case-insensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given header appears multiple times in the request we will
     * report it as a comma-separated string, in standard HTTP fashion.
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
     */
    public NameMatcher.Builder addHeadersBuilder() {
      return getHeadersFieldBuilder().addBuilder(
          NameMatcher.getDefaultInstance());
    }
    /**
     * <pre>
     * List of headers to try to match.
     * We extract all the specified header values (case-insensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given header appears multiple times in the request we will
     * report it as a comma-separated string, in standard HTTP fashion.
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
     */
    public NameMatcher.Builder addHeadersBuilder(
        int index) {
      return getHeadersFieldBuilder().addBuilder(
          index, NameMatcher.getDefaultInstance());
    }
    /**
     * <pre>
     * List of headers to try to match.
     * We extract all the specified header values (case-insensitively).  If any
     * are marked as "required_match" and are not present, this keybuilder fails
     * to match.  If a given header appears multiple times in the request we will
     * report it as a comma-separated string, in standard HTTP fashion.
     * </pre>
     *
     * <code>repeated .grpc.lookup.v1.NameMatcher headers = 4;</code>
     */
    public java.util.List<NameMatcher.Builder>
         getHeadersBuilderList() {
      return getHeadersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        NameMatcher, NameMatcher.Builder, NameMatcherOrBuilder>
        getHeadersFieldBuilder() {
      if (headersBuilder_ == null) {
        headersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            NameMatcher, NameMatcher.Builder, NameMatcherOrBuilder>(
                headers_,
                ((bitField0_ & 0x00000008) == 0x00000008),
                getParentForChildren(),
                isClean());
        headers_ = null;
      }
      return headersBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:grpc.lookup.v1.HttpKeyBuilder)
  }

  // @@protoc_insertion_point(class_scope:grpc.lookup.v1.HttpKeyBuilder)
  private static final HttpKeyBuilder DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new HttpKeyBuilder();
  }

  public static HttpKeyBuilder getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<HttpKeyBuilder>
      PARSER = new com.google.protobuf.AbstractParser<HttpKeyBuilder>() {
    public HttpKeyBuilder parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new HttpKeyBuilder(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<HttpKeyBuilder> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<HttpKeyBuilder> getParserForType() {
    return PARSER;
  }

  public HttpKeyBuilder getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

