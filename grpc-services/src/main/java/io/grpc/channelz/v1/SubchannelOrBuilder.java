// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc/channelz/v1/channelz.proto

package io.grpc.channelz.v1;

public interface SubchannelOrBuilder extends
    // @@protoc_insertion_point(interface_extends:grpc.channelz.v1.Subchannel)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The identifier for this channel.
   * </pre>
   *
   * <code>.grpc.channelz.v1.SubchannelRef ref = 1;</code>
   */
  boolean hasRef();
  /**
   * <pre>
   * The identifier for this channel.
   * </pre>
   *
   * <code>.grpc.channelz.v1.SubchannelRef ref = 1;</code>
   */
  SubchannelRef getRef();
  /**
   * <pre>
   * The identifier for this channel.
   * </pre>
   *
   * <code>.grpc.channelz.v1.SubchannelRef ref = 1;</code>
   */
  SubchannelRefOrBuilder getRefOrBuilder();

  /**
   * <pre>
   * Data specific to this channel.
   * </pre>
   *
   * <code>.grpc.channelz.v1.ChannelData data = 2;</code>
   */
  boolean hasData();
  /**
   * <pre>
   * Data specific to this channel.
   * </pre>
   *
   * <code>.grpc.channelz.v1.ChannelData data = 2;</code>
   */
  ChannelData getData();
  /**
   * <pre>
   * Data specific to this channel.
   * </pre>
   *
   * <code>.grpc.channelz.v1.ChannelData data = 2;</code>
   */
  ChannelDataOrBuilder getDataOrBuilder();

  /**
   * <pre>
   * There are no ordering guarantees on the order of channel refs.
   * There may not be cycles in the ref graph.
   * A channel ref may be present in more than one channel or subchannel.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
   */
  java.util.List<ChannelRef>
      getChannelRefList();
  /**
   * <pre>
   * There are no ordering guarantees on the order of channel refs.
   * There may not be cycles in the ref graph.
   * A channel ref may be present in more than one channel or subchannel.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
   */
  ChannelRef getChannelRef(int index);
  /**
   * <pre>
   * There are no ordering guarantees on the order of channel refs.
   * There may not be cycles in the ref graph.
   * A channel ref may be present in more than one channel or subchannel.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
   */
  int getChannelRefCount();
  /**
   * <pre>
   * There are no ordering guarantees on the order of channel refs.
   * There may not be cycles in the ref graph.
   * A channel ref may be present in more than one channel or subchannel.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
   */
  java.util.List<? extends ChannelRefOrBuilder>
      getChannelRefOrBuilderList();
  /**
   * <pre>
   * There are no ordering guarantees on the order of channel refs.
   * There may not be cycles in the ref graph.
   * A channel ref may be present in more than one channel or subchannel.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;</code>
   */
  ChannelRefOrBuilder getChannelRefOrBuilder(
      int index);

  /**
   * <pre>
   * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
   * There are no ordering guarantees on the order of subchannel refs.
   * There may not be cycles in the ref graph.
   * A sub channel ref may be present in more than one channel or subchannel.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
   */
  java.util.List<SubchannelRef>
      getSubchannelRefList();
  /**
   * <pre>
   * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
   * There are no ordering guarantees on the order of subchannel refs.
   * There may not be cycles in the ref graph.
   * A sub channel ref may be present in more than one channel or subchannel.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
   */
  SubchannelRef getSubchannelRef(int index);
  /**
   * <pre>
   * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
   * There are no ordering guarantees on the order of subchannel refs.
   * There may not be cycles in the ref graph.
   * A sub channel ref may be present in more than one channel or subchannel.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
   */
  int getSubchannelRefCount();
  /**
   * <pre>
   * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
   * There are no ordering guarantees on the order of subchannel refs.
   * There may not be cycles in the ref graph.
   * A sub channel ref may be present in more than one channel or subchannel.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
   */
  java.util.List<? extends SubchannelRefOrBuilder>
      getSubchannelRefOrBuilderList();
  /**
   * <pre>
   * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
   * There are no ordering guarantees on the order of subchannel refs.
   * There may not be cycles in the ref graph.
   * A sub channel ref may be present in more than one channel or subchannel.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;</code>
   */
  SubchannelRefOrBuilder getSubchannelRefOrBuilder(
      int index);

  /**
   * <pre>
   * There are no ordering guarantees on the order of sockets.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
   */
  java.util.List<SocketRef>
      getSocketRefList();
  /**
   * <pre>
   * There are no ordering guarantees on the order of sockets.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
   */
  SocketRef getSocketRef(int index);
  /**
   * <pre>
   * There are no ordering guarantees on the order of sockets.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
   */
  int getSocketRefCount();
  /**
   * <pre>
   * There are no ordering guarantees on the order of sockets.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
   */
  java.util.List<? extends SocketRefOrBuilder>
      getSocketRefOrBuilderList();
  /**
   * <pre>
   * There are no ordering guarantees on the order of sockets.
   * </pre>
   *
   * <code>repeated .grpc.channelz.v1.SocketRef socket_ref = 5;</code>
   */
  SocketRefOrBuilder getSocketRefOrBuilder(
      int index);
}
